# Generated by Django 2.2.5 on 2020-03-26 14:30

import ckeditor.fields
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Hydrology',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('length', models.DecimalField(blank=True, decimal_places=8, max_digits=38, null=True)),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('size', models.IntegerField(blank=True, null=True)),
                ('map_sheet', models.CharField(blank=True, max_length=50, null=True)),
                ('geom', django.contrib.gis.db.models.fields.LineStringField(srid=4326)),
            ],
            options={
                'verbose_name': 'HRP Hydrology',
                'verbose_name_plural': 'HRP Hydrology',
            },
        ),
        migrations.CreateModel(
            name='IdentificationQualifier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now, help_text='The date and time this resource was first created.', verbose_name='Created')),
                ('date_last_modified', models.DateTimeField(default=django.utils.timezone.now, help_text='The date and time this resource was last altered.', verbose_name='Modified')),
                ('problem', models.BooleanField(default=False, help_text='Is there a problem with this record that needs attention?')),
                ('problem_comment', models.TextField(blank=True, help_text='Description of the problem.', max_length=255, null=True)),
                ('remarks', ckeditor.fields.RichTextField(blank=True, help_text='General remarks about this database record.', null=True, verbose_name='Record Remarks')),
                ('last_import', models.BooleanField(default=False)),
                ('name', models.CharField(blank=True, max_length=15, unique=True)),
                ('qualified', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'HRP ID Qualifier',
                'verbose_name_plural': 'HRP ID Qualifiers',
            },
        ),
        migrations.CreateModel(
            name='Locality',
            fields=[
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now, help_text='The date and time this resource was first created.', verbose_name='Created')),
                ('problem', models.BooleanField(default=False, help_text='Is there a problem with this record that needs attention?')),
                ('problem_comment', models.TextField(blank=True, help_text='Description of the problem.', max_length=255, null=True)),
                ('remarks', ckeditor.fields.RichTextField(blank=True, help_text='General remarks about this database record.', null=True, verbose_name='Record Remarks')),
                ('last_import', models.BooleanField(default=False)),
                ('georeference_remarks', models.TextField(blank=True, max_length=500, null=True)),
                ('formation', models.CharField(blank=True, max_length=50, null=True)),
                ('member', models.CharField(blank=True, max_length=50, null=True)),
                ('id', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('collection_code', models.CharField(blank=True, choices=[('A.L.', 'A.L.')], max_length=10, null=True)),
                ('locality_number', models.IntegerField(blank=True, null=True)),
                ('sublocality', models.CharField(blank=True, max_length=50, null=True)),
                ('description', models.TextField(blank=True, max_length=255, null=True)),
                ('stratigraphic_section', models.CharField(blank=True, max_length=50, null=True)),
                ('upper_limit_in_section', models.IntegerField(blank=True, null=True)),
                ('lower_limit_in_section', models.DecimalField(blank=True, decimal_places=8, max_digits=38, null=True)),
                ('error_notes', models.CharField(blank=True, max_length=255, null=True)),
                ('notes', models.CharField(blank=True, max_length=254, null=True)),
                ('geom', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('date_last_modified', models.DateTimeField(auto_now=True, verbose_name='Date Last Modified')),
            ],
            options={
                'verbose_name': 'HRP Locality',
                'verbose_name_plural': 'HRP Localities',
                'ordering': ('locality_number', 'sublocality'),
            },
        ),
        migrations.CreateModel(
            name='Occurrence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now, help_text='The date and time this resource was first created.', verbose_name='Created')),
                ('date_last_modified', models.DateTimeField(default=django.utils.timezone.now, help_text='The date and time this resource was last altered.', verbose_name='Modified')),
                ('problem', models.BooleanField(default=False, help_text='Is there a problem with this record that needs attention?')),
                ('problem_comment', models.TextField(blank=True, help_text='Description of the problem.', max_length=255, null=True)),
                ('remarks', ckeditor.fields.RichTextField(blank=True, help_text='General remarks about this database record.', null=True, verbose_name='Record Remarks')),
                ('last_import', models.BooleanField(default=False)),
                ('georeference_remarks', models.TextField(blank=True, max_length=500, null=True)),
                ('geom', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('date_recorded', models.DateTimeField(blank=True, help_text='Date and time the item was observed or collected.', null=True, verbose_name='Date Rec')),
                ('year_collected', models.IntegerField(blank=True, help_text='The year, event or field campaign during which the item was found.', null=True, verbose_name='Year')),
                ('barcode', models.IntegerField(blank=True, help_text='For collected items only.', null=True, verbose_name='Barcode')),
                ('basis_of_record', models.CharField(blank=True, choices=[('Collection', 'Collection'), ('Observation', 'Observation')], help_text='e.g. Observed item or Collected item', max_length=50, verbose_name='Basis of Record')),
                ('field_number', models.CharField(blank=True, max_length=50, null=True, verbose_name='Field Number')),
                ('item_type', models.CharField(blank=True, choices=[('Artifactual', 'Artifactual'), ('Faunal', 'Faunal'), ('Floral', 'Floral'), ('Geological', 'Geological')], max_length=255, verbose_name='Item Type')),
                ('item_scientific_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Sci Name')),
                ('item_description', models.CharField(blank=True, max_length=255, null=True, verbose_name='Description')),
                ('item_count', models.IntegerField(blank=True, default=1, null=True, verbose_name='Item Count')),
                ('collector', models.CharField(blank=True, choices=[('C.J. Campisano', 'C.J. Campisano'), ('W.H. Kimbel', 'W.H. Kimbel'), ('T.K. Nalley', 'T.K. Nalley'), ('D.N. Reed', 'D.N. Reed'), ('Kaye Reed', 'Kaye Reed'), ('B.J. Schoville', 'B.J. Schoville'), ('A.E. Shapiro', 'A.E. Shapiro'), ('HFS Student', 'HFS Student'), ('HRP Team', 'HRP Team')], max_length=50, null=True, verbose_name='Collector')),
                ('finder', models.CharField(blank=True, choices=[('C.J. Campisano', 'C.J. Campisano'), ('W.H. Kimbel', 'W.H. Kimbel'), ('T.K. Nalley', 'T.K. Nalley'), ('D.N. Reed', 'D.N. Reed'), ('Kaye Reed', 'Kaye Reed'), ('B.J. Schoville', 'B.J. Schoville'), ('A.E. Shapiro', 'A.E. Shapiro'), ('HFS Student', 'HFS Student'), ('HRP Team', 'HRP Team')], max_length=50, null=True, verbose_name='Finder')),
                ('collecting_method', models.CharField(blank=True, choices=[('Survey', 'Survey'), ('dryscreen5mm', 'dryscreen5mm'), ('wetscreen1mm', 'wetscreen1mm')], max_length=50, null=True, verbose_name='Collecting Method')),
                ('item_number', models.IntegerField(blank=True, null=True, verbose_name='Item #')),
                ('item_part', models.CharField(blank=True, max_length=10, null=True, verbose_name='Item Part')),
                ('cat_number', models.CharField(blank=True, max_length=255, null=True, verbose_name='Cat Number')),
                ('disposition', models.CharField(blank=True, max_length=255, null=True, verbose_name='Disposition')),
                ('preparation_status', models.CharField(blank=True, max_length=50, null=True, verbose_name='Prep Status')),
                ('collection_remarks', models.TextField(blank=True, max_length=255, null=True, verbose_name='Collection Remarks')),
                ('stratigraphic_formation', models.CharField(blank=True, max_length=255, null=True, verbose_name='Formation')),
                ('stratigraphic_member', models.CharField(blank=True, max_length=255, null=True, verbose_name='Member')),
                ('analytical_unit_1', models.CharField(blank=True, max_length=255, null=True)),
                ('analytical_unit_2', models.CharField(blank=True, max_length=255, null=True)),
                ('analytical_unit_3', models.CharField(blank=True, max_length=255, null=True)),
                ('analytical_unit_found', models.CharField(blank=True, max_length=255, null=True)),
                ('analytical_unit_likely', models.CharField(blank=True, max_length=255, null=True)),
                ('analytical_unit_simplified', models.CharField(blank=True, max_length=255, null=True)),
                ('in_situ', models.BooleanField(default=False)),
                ('ranked', models.BooleanField(default=False)),
                ('weathering', models.SmallIntegerField(blank=True, null=True)),
                ('surface_modification', models.CharField(blank=True, max_length=255, null=True, verbose_name='Surface Mod')),
                ('geology_remarks', models.TextField(blank=True, max_length=500, null=True, verbose_name='Geol Remarks')),
                ('collection_code', models.CharField(blank=True, max_length=20, null=True, verbose_name='Collection Code')),
                ('drainage_region', models.CharField(blank=True, max_length=255, null=True, verbose_name='Drainage Region')),
                ('image', models.FileField(blank=True, max_length=255, null=True, upload_to='uploads/images/hrp')),
            ],
            options={
                'verbose_name': 'HRP Occurrence',
                'verbose_name_plural': 'HRP Occurrences',
                'ordering': ['collection_code', 'locality', 'item_number', 'item_part'],
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now, help_text='The date and time this resource was first created.', verbose_name='Created')),
                ('date_last_modified', models.DateTimeField(default=django.utils.timezone.now, help_text='The date and time this resource was last altered.', verbose_name='Modified')),
                ('problem', models.BooleanField(default=False, help_text='Is there a problem with this record that needs attention?')),
                ('problem_comment', models.TextField(blank=True, help_text='Description of the problem.', max_length=255, null=True)),
                ('remarks', ckeditor.fields.RichTextField(blank=True, help_text='General remarks about this database record.', null=True, verbose_name='Record Remarks')),
                ('last_import', models.BooleanField(default=False)),
                ('last_name', models.CharField(blank=True, max_length=256, null=True, verbose_name='Last Name')),
                ('first_name', models.CharField(blank=True, max_length=256, null=True, verbose_name='First Name')),
            ],
            options={
                'verbose_name': 'HRP Person',
                'verbose_name_plural': 'HRP People',
                'ordering': ['last_name', 'first_name'],
            },
        ),
        migrations.CreateModel(
            name='TaxonRank',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now, help_text='The date and time this resource was first created.', verbose_name='Created')),
                ('date_last_modified', models.DateTimeField(default=django.utils.timezone.now, help_text='The date and time this resource was last altered.', verbose_name='Modified')),
                ('problem', models.BooleanField(default=False, help_text='Is there a problem with this record that needs attention?')),
                ('problem_comment', models.TextField(blank=True, help_text='Description of the problem.', max_length=255, null=True)),
                ('remarks', ckeditor.fields.RichTextField(blank=True, help_text='General remarks about this database record.', null=True, verbose_name='Record Remarks')),
                ('last_import', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('plural', models.CharField(max_length=50, unique=True)),
                ('ordinal', models.IntegerField(unique=True)),
            ],
            options={
                'verbose_name': 'HRP Taxon Rank',
                'verbose_name_plural': 'HRP Taxon Ranks',
            },
        ),
        migrations.CreateModel(
            name='Archaeology',
            fields=[
                ('occurrence_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='hrp.Occurrence')),
                ('find_type', models.CharField(blank=True, max_length=255, null=True)),
                ('length_mm', models.DecimalField(blank=True, decimal_places=8, max_digits=38, null=True)),
                ('width_mm', models.DecimalField(blank=True, decimal_places=8, max_digits=38, null=True)),
            ],
            options={
                'verbose_name': 'HRP Archaeology',
                'verbose_name_plural': 'HRP Archaeology',
            },
            bases=('hrp.occurrence',),
        ),
        migrations.CreateModel(
            name='Geology',
            fields=[
                ('occurrence_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='hrp.Occurrence')),
                ('find_type', models.CharField(blank=True, max_length=255, null=True)),
                ('dip', models.DecimalField(blank=True, decimal_places=8, max_digits=38, null=True)),
                ('strike', models.DecimalField(blank=True, decimal_places=8, max_digits=38, null=True)),
                ('color', models.CharField(blank=True, max_length=255, null=True)),
                ('texture', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'HRP Geology',
                'verbose_name_plural': 'HRP Geology',
            },
            bases=('hrp.occurrence',),
        ),
        migrations.CreateModel(
            name='Taxon',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now, help_text='The date and time this resource was first created.', verbose_name='Created')),
                ('date_last_modified', models.DateTimeField(default=django.utils.timezone.now, help_text='The date and time this resource was last altered.', verbose_name='Modified')),
                ('problem', models.BooleanField(default=False, help_text='Is there a problem with this record that needs attention?')),
                ('problem_comment', models.TextField(blank=True, help_text='Description of the problem.', max_length=255, null=True)),
                ('remarks', ckeditor.fields.RichTextField(blank=True, help_text='General remarks about this database record.', null=True, verbose_name='Record Remarks')),
                ('last_import', models.BooleanField(default=False)),
                ('label', models.CharField(blank=True, help_text='For a species, the name field contains the specific epithet and the label contains the full\n    scientific name, e.g. Homo sapiens, name = sapiens, label = Homo sapiens', max_length=244, null=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrp.Taxon')),
                ('rank', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrp.TaxonRank')),
            ],
            options={
                'verbose_name': 'HRP Taxon',
                'verbose_name_plural': 'HRP Taxa',
            },
        ),
        migrations.AddField(
            model_name='occurrence',
            name='found_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='occurrence_found_by', to='hrp.Person'),
        ),
        migrations.AddField(
            model_name='occurrence',
            name='locality',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrp.Locality'),
        ),
        migrations.AddField(
            model_name='occurrence',
            name='recorded_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='occurrence_recorded_by', to='hrp.Person'),
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, null=True, upload_to='uploads/images')),
                ('description', models.TextField(blank=True, null=True)),
                ('occurrence', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hrp_occurrences', to='hrp.Occurrence')),
            ],
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(blank=True, null=True, upload_to='uploads/files')),
                ('description', models.TextField(blank=True, null=True)),
                ('occurrence', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hrp.Occurrence')),
            ],
        ),
        migrations.CreateModel(
            name='Biology',
            fields=[
                ('occurrence_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='hrp.Occurrence')),
                ('sex', models.CharField(blank=True, max_length=50, null=True, verbose_name='Sex')),
                ('life_stage', models.CharField(blank=True, choices=[('infant', 'infant'), ('juvenile', 'juvenile')], max_length=50, null=True, verbose_name='Life Stage')),
                ('size_class', models.CharField(blank=True, choices=[('indeterminate', 'indeterminate'), ('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('5', '5')], max_length=50, null=True, verbose_name='Size Class')),
                ('verbatim_taxon', models.CharField(blank=True, max_length=1024, null=True)),
                ('verbatim_identification_qualifier', models.CharField(blank=True, max_length=255, null=True)),
                ('taxonomy_remarks', models.TextField(blank=True, max_length=500, null=True)),
                ('identified_by', models.CharField(blank=True, choices=[('Z. Alemseged', 'Z. Alemseged'), ('R.L. Bernor', 'R.L. Bernor'), ('R. Bobe-Quinteros', 'R. Bobe-Quinteros'), ('P. Brodkorb', 'P. Brodkorb'), ('H.B.S. Cooke', 'H.B.S. Cooke'), ('E. Delson', 'E. Delson'), ('C. Denys', 'C. Denys'), ('G.G. Eck', 'G.G. Eck'), ('V. Eisenmann', 'V. Eisenmann'), ('N. Fessaha', 'N. Fessaha'), ('L.J. Flynn', 'L.J. Flynn'), ('S.R. Frost', 'S.R. Frost'), ('A.W. Gentry', 'A.W. Gentry'), ('D. Geraads', 'D. Geraads'), ('R. Geze', 'R. Geze'), ('F.C. Howell', 'F.C. Howell'), ('Institute Staff', 'Institute Staff'), ('D.C. Johanson', 'D.C. Johanson'), ('W.H. Kimbel', 'W.H. Kimbel'), ('H.B. Krentza', 'H.B. Krentza'), ('B.M. Latimer', 'B.M. Latimer'), ('M.E. Lewis', 'M.E. Lewis'), ('C.A. Lockwood', 'C.A. Lockwood'), ('T.K. Nalley', 'T.K. Nalley'), ('G. Petter', 'G. Petter'), ('J.C. Rage', 'J.C. Rage'), ('D. Reed', 'D. Reed'), ('K.E. Reed', 'K.E. Reed'), ('J. Rowan', 'J. Rowan'), ('M. Sabatier', 'M. Sabatier'), ('B.J. Schoville', 'B.J. Schoville'), ('A.E. Shapiro', 'A.E. Shapiro'), ('G. Suwa', 'G. Suwa'), ('E.S. Vrba', 'E.S. Vrba'), ('L.A. Werdelin', 'L.A. Werdelin'), ('H.B. Wesselman', 'H.B. Wesselman'), ('T.D. White', 'T.D. White')], max_length=100, null=True)),
                ('year_identified', models.IntegerField(blank=True, null=True)),
                ('type_status', models.CharField(blank=True, max_length=50, null=True)),
                ('fauna_notes', models.TextField(blank=True, max_length=64000, null=True)),
                ('side', models.CharField(blank=True, choices=[('L', 'L'), ('R', 'R'), ('Indeterminate', 'Indeterminate'), ('L+R', 'L+R')], max_length=50, null=True, verbose_name='Side')),
                ('element', models.CharField(blank=True, choices=[('astragalus', 'astragalus'), ('bacculum', 'bacculum'), ('bone (indet.)', 'bone (indet.)'), ('calcaneus', 'calcaneus'), ('canine', 'canine'), ('capitate', 'capitate'), ('carapace', 'carapace'), ('carpal (indet.)', 'carpal (indet.)'), ('carpal/tarsal', 'carpal/tarsal'), ('carpometacarpus', 'carpometacarpus'), ('carpus', 'carpus'), ('chela', 'chela'), ('clavicle', 'clavicle'), ('coccyx', 'coccyx'), ('coprolite', 'coprolite'), ('cranium', 'cranium'), ('cranium w/horn core', 'cranium w/horn core'), ('cuboid', 'cuboid'), ('cubonavicular', 'cubonavicular'), ('cuneiform', 'cuneiform'), ('dermal plate', 'dermal plate'), ('egg shell', 'egg shell'), ('endocast', 'endocast'), ('ethmoid', 'ethmoid'), ('femur', 'femur'), ('fibula', 'fibula'), ('frontal', 'frontal'), ('hamate', 'hamate'), ('horn core', 'horn core'), ('humerus', 'humerus'), ('hyoid', 'hyoid'), ('Ilium', 'Ilium'), ('incisor', 'incisor'), ('innominate', 'innominate'), ('ischium', 'ischium'), ('lacrimal', 'lacrimal'), ('long bone ', 'long bone '), ('lunate', 'lunate'), ('mandible', 'mandible'), ('manus', 'manus'), ('maxilla', 'maxilla'), ('metacarpal', 'metacarpal'), ('metapodial', 'metapodial'), ('metatarsal', 'metatarsal'), ('molar', 'molar'), ('nasal', 'nasal'), ('navicular', 'navicular'), ('naviculocuboid', 'naviculocuboid'), ('occipital', 'occipital'), ('ossicone', 'ossicone'), ('parietal', 'parietal'), ('patella', 'patella'), ('pes', 'pes'), ('phalanx', 'phalanx'), ('pisiform', 'pisiform'), ('plastron', 'plastron'), ('premaxilla', 'premaxilla'), ('premolar', 'premolar'), ('pubis', 'pubis'), ('radioulna', 'radioulna'), ('radius', 'radius'), ('rib', 'rib'), ('sacrum', 'sacrum'), ('scaphoid', 'scaphoid'), ('scapholunar', 'scapholunar'), ('scapula', 'scapula'), ('scute', 'scute'), ('sesamoid', 'sesamoid'), ('shell', 'shell'), ('skeleton', 'skeleton'), ('skull', 'skull'), ('sphenoid', 'sphenoid'), ('sternum', 'sternum'), ('talon', 'talon'), ('talus', 'talus'), ('tarsal (indet.)', 'tarsal (indet.)'), ('tarsometatarsus', 'tarsometatarsus'), ('tarsus', 'tarsus'), ('temporal', 'temporal'), ('tibia', 'tibia'), ('tibiotarsus', 'tibiotarsus'), ('tooth (indet.)', 'tooth (indet.)'), ('trapezium', 'trapezium'), ('trapezoid', 'trapezoid'), ('triquetrum', 'triquetrum'), ('ulna', 'ulna'), ('vertebra', 'vertebra'), ('vomer', 'vomer'), ('zygomatic', 'zygomatic'), ('pharyngeal teeth', 'pharyngeal teeth'), ('molars', 'molars'), ('tusk', 'tusk'), ('horn corn', 'horn corn'), ('spine', 'spine'), ('silicified wood', 'silicified wood'), ('dentary', 'dentary'), ('cleithrum', 'cleithrum'), ('skull plate', 'skull plate'), ('basicranium', 'basicranium'), ('angulararticular', 'angulararticular'), ('ribs', 'ribs'), ('lateral ethmoid', 'lateral ethmoid'), ('pterotic', 'pterotic'), ('tooth roots', 'tooth roots'), ('shells', 'shells'), ('pharyngeal tooth', 'pharyngeal tooth'), ('ilium', 'ilium'), ('hemimandible', 'hemimandible'), ('pectoral spine', 'pectoral spine'), ('palate', 'palate'), ('pelvis', 'pelvis'), ('long bone', 'long bone'), ('axis', 'axis'), ('acetabulum', 'acetabulum'), ('magnum', 'magnum'), ('hemi-mandible', 'hemi-mandible'), ('weberian', 'weberian'), ('supraoccipital', 'supraoccipital'), ('anguloarticular', 'anguloarticular')], max_length=50, null=True, verbose_name='Element')),
                ('element_modifier', models.CharField(blank=True, choices=[('articulated', 'articulated'), ('caudal', 'caudal'), ('cervical', 'cervical'), ('coccygeal', 'coccygeal'), ('distal', 'distal'), ('intermediate', 'intermediate'), ('lower', 'lower'), ('lumbar', 'lumbar'), ('manual', 'manual'), ('manual distal', 'manual distal'), ('manual intermediate', 'manual intermediate'), ('manual proximal', 'manual proximal'), ('medial', 'medial'), ('pedal', 'pedal'), ('pedal distal', 'pedal distal'), ('pedal intermediate', 'pedal intermediate'), ('pedal proximal', 'pedal proximal'), ('proximal', 'proximal'), ('sacral', 'sacral'), ('thoracic', 'thoracic'), ('upper', 'upper'), ('indeterminate', 'indeterminate')], max_length=50, null=True, verbose_name='Element Mod')),
                ('element_portion', models.CharField(blank=True, choices=[('almost complete', 'almost complete'), ('anterior', 'anterior'), ('basal', 'basal'), ('caudal', 'caudal'), ('complete', 'complete'), ('cranial', 'cranial'), ('diaphysis', 'diaphysis'), ('diaphysis+distal', 'diaphysis+distal'), ('diaphysis+proximal', 'diaphysis+proximal'), ('distal', 'distal'), ('dorsal', 'dorsal'), ('epiphysis', 'epiphysis'), ('fragment', 'fragment'), ('fragments', 'fragments'), ('indeterminate', 'indeterminate'), ('lateral', 'lateral'), ('medial', 'medial'), ('midsection', 'midsection'), ('midsection+basal', 'midsection+basal'), ('midsection+distal', 'midsection+distal'), ('posterior', 'posterior'), ('proximal', 'proximal'), ('symphysis', 'symphysis'), ('ventral', 'ventral')], max_length=50, null=True, verbose_name='Element Portion')),
                ('element_number', models.CharField(blank=True, choices=[('1', '1'), ('2', '2'), ('3', '3'), ('3(medial)', '3(medial)'), ('4', '4'), ('4(lateral)', '4(lateral)'), ('5', '5'), ('6', '6'), ('7', '7'), ('8', '8'), ('9', '9'), ('10', '10'), ('11', '11'), ('12', '12'), ('13', '13'), ('14', '14'), ('15', '15'), ('16', '16'), ('17', '17'), ('2-7', '2-7'), ('8-12', '8-12'), ('indeterminate', 'indeterminate')], max_length=50, null=True)),
                ('element_remarks', models.TextField(blank=True, max_length=500, null=True)),
                ('tooth_upper_or_lower', models.CharField(blank=True, max_length=50, null=True)),
                ('tooth_number', models.CharField(blank=True, max_length=50, null=True)),
                ('tooth_type', models.CharField(blank=True, max_length=50, null=True)),
                ('uli1', models.BooleanField(default=False)),
                ('uli2', models.BooleanField(default=False)),
                ('uli3', models.BooleanField(default=False)),
                ('uli4', models.BooleanField(default=False)),
                ('uli5', models.BooleanField(default=False)),
                ('uri1', models.BooleanField(default=False)),
                ('uri2', models.BooleanField(default=False)),
                ('uri3', models.BooleanField(default=False)),
                ('uri4', models.BooleanField(default=False)),
                ('uri5', models.BooleanField(default=False)),
                ('ulc', models.BooleanField(default=False)),
                ('urc', models.BooleanField(default=False)),
                ('ulp1', models.BooleanField(default=False)),
                ('ulp2', models.BooleanField(default=False)),
                ('ulp3', models.BooleanField(default=False)),
                ('ulp4', models.BooleanField(default=False)),
                ('urp1', models.BooleanField(default=False)),
                ('urp2', models.BooleanField(default=False)),
                ('urp3', models.BooleanField(default=False)),
                ('urp4', models.BooleanField(default=False)),
                ('ulm1', models.BooleanField(default=False)),
                ('ulm2', models.BooleanField(default=False)),
                ('ulm3', models.BooleanField(default=False)),
                ('urm1', models.BooleanField(default=False)),
                ('urm2', models.BooleanField(default=False)),
                ('urm3', models.BooleanField(default=False)),
                ('lli1', models.BooleanField(default=False)),
                ('lli2', models.BooleanField(default=False)),
                ('lli3', models.BooleanField(default=False)),
                ('lli4', models.BooleanField(default=False)),
                ('lli5', models.BooleanField(default=False)),
                ('lri1', models.BooleanField(default=False)),
                ('lri2', models.BooleanField(default=False)),
                ('lri3', models.BooleanField(default=False)),
                ('lri4', models.BooleanField(default=False)),
                ('lri5', models.BooleanField(default=False)),
                ('llc', models.BooleanField(default=False)),
                ('lrc', models.BooleanField(default=False)),
                ('llp1', models.BooleanField(default=False)),
                ('llp2', models.BooleanField(default=False)),
                ('llp3', models.BooleanField(default=False)),
                ('llp4', models.BooleanField(default=False)),
                ('lrp1', models.BooleanField(default=False)),
                ('lrp2', models.BooleanField(default=False)),
                ('lrp3', models.BooleanField(default=False)),
                ('lrp4', models.BooleanField(default=False)),
                ('llm1', models.BooleanField(default=False)),
                ('llm2', models.BooleanField(default=False)),
                ('llm3', models.BooleanField(default=False)),
                ('lrm1', models.BooleanField(default=False)),
                ('lrm2', models.BooleanField(default=False)),
                ('lrm3', models.BooleanField(default=False)),
                ('indet_incisor', models.BooleanField(default=False)),
                ('indet_canine', models.BooleanField(default=False)),
                ('indet_premolar', models.BooleanField(default=False)),
                ('indet_molar', models.BooleanField(default=False)),
                ('indet_tooth', models.BooleanField(default=False)),
                ('deciduous', models.BooleanField(default=False)),
                ('um_tooth_row_length_mm', models.DecimalField(blank=True, decimal_places=8, max_digits=38, null=True)),
                ('um_1_length_mm', models.DecimalField(blank=True, decimal_places=8, max_digits=38, null=True)),
                ('um_1_width_mm', models.DecimalField(blank=True, decimal_places=8, max_digits=38, null=True)),
                ('um_2_length_mm', models.DecimalField(blank=True, decimal_places=8, max_digits=38, null=True)),
                ('um_2_width_mm', models.DecimalField(blank=True, decimal_places=8, max_digits=38, null=True)),
                ('um_3_length_mm', models.DecimalField(blank=True, decimal_places=8, max_digits=38, null=True)),
                ('um_3_width_mm', models.DecimalField(blank=True, decimal_places=8, max_digits=38, null=True)),
                ('lm_tooth_row_length_mm', models.DecimalField(blank=True, decimal_places=8, max_digits=38, null=True)),
                ('lm_1_length', models.DecimalField(blank=True, decimal_places=8, max_digits=38, null=True)),
                ('lm_1_width', models.DecimalField(blank=True, decimal_places=8, max_digits=38, null=True)),
                ('lm_2_length', models.DecimalField(blank=True, decimal_places=8, max_digits=38, null=True)),
                ('lm_2_width', models.DecimalField(blank=True, decimal_places=8, max_digits=38, null=True)),
                ('lm_3_length', models.DecimalField(blank=True, decimal_places=8, max_digits=38, null=True)),
                ('lm_3_width', models.DecimalField(blank=True, decimal_places=8, max_digits=38, null=True)),
                ('attributes', models.CharField(blank=True, max_length=50, null=True)),
                ('preparations', models.CharField(blank=True, max_length=50, null=True)),
                ('morphobank_number', models.IntegerField(blank=True, null=True)),
                ('identification_qualifier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='hrp_id_qualifier_bio_occurrences', to='hrp.IdentificationQualifier')),
                ('qualifier_taxon', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='hrp_qualifier_taxon_bio_occurrences', to='hrp.Taxon')),
                ('taxon', models.ForeignKey(default=0, on_delete=django.db.models.deletion.SET_DEFAULT, related_name='hrp_taxon_bio_occurrences', to='hrp.Taxon')),
            ],
            options={
                'verbose_name': 'HRP Biology',
                'verbose_name_plural': 'HRP Biology',
            },
            bases=('hrp.occurrence',),
        ),
    ]
